// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_POINTPARALLELHASHGRIDSEARCHER2_CUBBYFLOW_FBS_H_
#define FLATBUFFERS_GENERATED_POINTPARALLELHASHGRIDSEARCHER2_CUBBYFLOW_FBS_H_

#include "flatbuffers/flatbuffers.h"

#include "BasicTypes_generated.h"

namespace CubbyFlow {
namespace fbs {

struct PointParallelHashGridSearcher2;

struct PointParallelHashGridSearcher2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_GRIDSPACING = 4,
    VT_RESOLUTION = 6,
    VT_POINTS = 8,
    VT_KEYS = 10,
    VT_STARTINDEXTABLE = 12,
    VT_ENDINDEXTABLE = 14,
    VT_SORTEDINDICES = 16
  };
  double GridSpacing() const { return GetField<double>(VT_GRIDSPACING, 0.0); }
  const CubbyFlow::fbs::Size2 *Resolution() const { return GetStruct<const CubbyFlow::fbs::Size2 *>(VT_RESOLUTION); }
  const flatbuffers::Vector<const CubbyFlow::fbs::Vector2D *> *Points() const { return GetPointer<const flatbuffers::Vector<const CubbyFlow::fbs::Vector2D *> *>(VT_POINTS); }
  const flatbuffers::Vector<uint64_t> *Keys() const { return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_KEYS); }
  const flatbuffers::Vector<uint64_t> *StartIndexTable() const { return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_STARTINDEXTABLE); }
  const flatbuffers::Vector<uint64_t> *EndIndexTable() const { return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_ENDINDEXTABLE); }
  const flatbuffers::Vector<uint64_t> *SortedIndices() const { return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_SORTEDINDICES); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_GRIDSPACING) &&
           VerifyField<CubbyFlow::fbs::Size2>(verifier, VT_RESOLUTION) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_POINTS) &&
           verifier.Verify(Points()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_KEYS) &&
           verifier.Verify(Keys()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_STARTINDEXTABLE) &&
           verifier.Verify(StartIndexTable()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ENDINDEXTABLE) &&
           verifier.Verify(EndIndexTable()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SORTEDINDICES) &&
           verifier.Verify(SortedIndices()) &&
           verifier.EndTable();
  }
};

struct PointParallelHashGridSearcher2Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_GridSpacing(double gridSpacing) { fbb_.AddElement<double>(PointParallelHashGridSearcher2::VT_GRIDSPACING, gridSpacing, 0.0); }
  void add_Resolution(const CubbyFlow::fbs::Size2 *resolution) { fbb_.AddStruct(PointParallelHashGridSearcher2::VT_RESOLUTION, resolution); }
  void add_Points(flatbuffers::Offset<flatbuffers::Vector<const CubbyFlow::fbs::Vector2D *>> points) { fbb_.AddOffset(PointParallelHashGridSearcher2::VT_POINTS, points); }
  void add_Keys(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> keys) { fbb_.AddOffset(PointParallelHashGridSearcher2::VT_KEYS, keys); }
  void add_StartIndexTable(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> startIndexTable) { fbb_.AddOffset(PointParallelHashGridSearcher2::VT_STARTINDEXTABLE, startIndexTable); }
  void add_EndIndexTable(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> endIndexTable) { fbb_.AddOffset(PointParallelHashGridSearcher2::VT_ENDINDEXTABLE, endIndexTable); }
  void add_SortedIndices(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> sortedIndices) { fbb_.AddOffset(PointParallelHashGridSearcher2::VT_SORTEDINDICES, sortedIndices); }
  PointParallelHashGridSearcher2Builder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PointParallelHashGridSearcher2Builder &operator=(const PointParallelHashGridSearcher2Builder &);
  flatbuffers::Offset<PointParallelHashGridSearcher2> Finish() {
    auto o = flatbuffers::Offset<PointParallelHashGridSearcher2>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<PointParallelHashGridSearcher2> CreatePointParallelHashGridSearcher2(flatbuffers::FlatBufferBuilder &_fbb,
    double gridSpacing = 0.0,
    const CubbyFlow::fbs::Size2 *resolution = 0,
    flatbuffers::Offset<flatbuffers::Vector<const CubbyFlow::fbs::Vector2D *>> points = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> keys = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> startIndexTable = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> endIndexTable = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> sortedIndices = 0) {
  PointParallelHashGridSearcher2Builder builder_(_fbb);
  builder_.add_GridSpacing(gridSpacing);
  builder_.add_SortedIndices(sortedIndices);
  builder_.add_EndIndexTable(endIndexTable);
  builder_.add_StartIndexTable(startIndexTable);
  builder_.add_Keys(keys);
  builder_.add_Points(points);
  builder_.add_Resolution(resolution);
  return builder_.Finish();
}

inline flatbuffers::Offset<PointParallelHashGridSearcher2> CreatePointParallelHashGridSearcher2Direct(flatbuffers::FlatBufferBuilder &_fbb,
    double gridSpacing = 0.0,
    const CubbyFlow::fbs::Size2 *resolution = 0,
    const std::vector<const CubbyFlow::fbs::Vector2D *> *points = nullptr,
    const std::vector<uint64_t> *keys = nullptr,
    const std::vector<uint64_t> *startIndexTable = nullptr,
    const std::vector<uint64_t> *endIndexTable = nullptr,
    const std::vector<uint64_t> *sortedIndices = nullptr) {
  return CreatePointParallelHashGridSearcher2(_fbb, gridSpacing, resolution, points ? _fbb.CreateVector<const CubbyFlow::fbs::Vector2D *>(*points) : 0, keys ? _fbb.CreateVector<uint64_t>(*keys) : 0, startIndexTable ? _fbb.CreateVector<uint64_t>(*startIndexTable) : 0, endIndexTable ? _fbb.CreateVector<uint64_t>(*endIndexTable) : 0, sortedIndices ? _fbb.CreateVector<uint64_t>(*sortedIndices) : 0);
}

inline const CubbyFlow::fbs::PointParallelHashGridSearcher2 *GetPointParallelHashGridSearcher2(const void *buf) { return flatbuffers::GetRoot<CubbyFlow::fbs::PointParallelHashGridSearcher2>(buf); }

inline bool VerifyPointParallelHashGridSearcher2Buffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<CubbyFlow::fbs::PointParallelHashGridSearcher2>(nullptr); }

inline void FinishPointParallelHashGridSearcher2Buffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<CubbyFlow::fbs::PointParallelHashGridSearcher2> root) { fbb.Finish(root); }

}  // namespace fbs
}  // namespace CubbyFlow

#endif  // FLATBUFFERS_GENERATED_POINTPARALLELHASHGRIDSEARCHER2_CUBBYFLOW_FBS_H_
