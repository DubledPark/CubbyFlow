// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_SPHSYSTEMDATA3_CUBBYFLOW_FBS_H_
#define FLATBUFFERS_GENERATED_SPHSYSTEMDATA3_CUBBYFLOW_FBS_H_

#include "flatbuffers/flatbuffers.h"

#include "BasicTypes_generated.h"
#include "ParticleSystemData3_generated.h"

namespace CubbyFlow {
namespace fbs {

struct SPHSystemData3;

struct SPHSystemData3 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_BASE = 4,
    VT_TARGETDENSITY = 6,
    VT_TARGETSPACING = 8,
    VT_KERNELRADIUSOVERTARGETSPACING = 10,
    VT_KERNELRADIUS = 12,
    VT_PRESSUREIDX = 14,
    VT_DENSITYIDX = 16
  };
  const CubbyFlow::fbs::ParticleSystemData3 *Base() const { return GetPointer<const CubbyFlow::fbs::ParticleSystemData3 *>(VT_BASE); }
  double TargetDensity() const { return GetField<double>(VT_TARGETDENSITY, 0.0); }
  double TargetSpacing() const { return GetField<double>(VT_TARGETSPACING, 0.0); }
  double KernelRadiusOverTargetSpacing() const { return GetField<double>(VT_KERNELRADIUSOVERTARGETSPACING, 0.0); }
  double KernelRadius() const { return GetField<double>(VT_KERNELRADIUS, 0.0); }
  uint64_t PressureIdx() const { return GetField<uint64_t>(VT_PRESSUREIDX, 0); }
  uint64_t DensityIdx() const { return GetField<uint64_t>(VT_DENSITYIDX, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_BASE) &&
           verifier.VerifyTable(Base()) &&
           VerifyField<double>(verifier, VT_TARGETDENSITY) &&
           VerifyField<double>(verifier, VT_TARGETSPACING) &&
           VerifyField<double>(verifier, VT_KERNELRADIUSOVERTARGETSPACING) &&
           VerifyField<double>(verifier, VT_KERNELRADIUS) &&
           VerifyField<uint64_t>(verifier, VT_PRESSUREIDX) &&
           VerifyField<uint64_t>(verifier, VT_DENSITYIDX) &&
           verifier.EndTable();
  }
};

struct SPHSystemData3Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Base(flatbuffers::Offset<CubbyFlow::fbs::ParticleSystemData3> base) { fbb_.AddOffset(SPHSystemData3::VT_BASE, base); }
  void add_TargetDensity(double targetDensity) { fbb_.AddElement<double>(SPHSystemData3::VT_TARGETDENSITY, targetDensity, 0.0); }
  void add_TargetSpacing(double targetSpacing) { fbb_.AddElement<double>(SPHSystemData3::VT_TARGETSPACING, targetSpacing, 0.0); }
  void add_KernelRadiusOverTargetSpacing(double kernelRadiusOverTargetSpacing) { fbb_.AddElement<double>(SPHSystemData3::VT_KERNELRADIUSOVERTARGETSPACING, kernelRadiusOverTargetSpacing, 0.0); }
  void add_KernelRadius(double kernelRadius) { fbb_.AddElement<double>(SPHSystemData3::VT_KERNELRADIUS, kernelRadius, 0.0); }
  void add_PressureIdx(uint64_t pressureIdx) { fbb_.AddElement<uint64_t>(SPHSystemData3::VT_PRESSUREIDX, pressureIdx, 0); }
  void add_DensityIdx(uint64_t densityIdx) { fbb_.AddElement<uint64_t>(SPHSystemData3::VT_DENSITYIDX, densityIdx, 0); }
  SPHSystemData3Builder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SPHSystemData3Builder &operator=(const SPHSystemData3Builder &);
  flatbuffers::Offset<SPHSystemData3> Finish() {
    auto o = flatbuffers::Offset<SPHSystemData3>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<SPHSystemData3> CreateSPHSystemData3(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<CubbyFlow::fbs::ParticleSystemData3> base = 0,
    double targetDensity = 0.0,
    double targetSpacing = 0.0,
    double kernelRadiusOverTargetSpacing = 0.0,
    double kernelRadius = 0.0,
    uint64_t pressureIdx = 0,
    uint64_t densityIdx = 0) {
  SPHSystemData3Builder builder_(_fbb);
  builder_.add_DensityIdx(densityIdx);
  builder_.add_PressureIdx(pressureIdx);
  builder_.add_KernelRadius(kernelRadius);
  builder_.add_KernelRadiusOverTargetSpacing(kernelRadiusOverTargetSpacing);
  builder_.add_TargetSpacing(targetSpacing);
  builder_.add_TargetDensity(targetDensity);
  builder_.add_Base(base);
  return builder_.Finish();
}

inline const CubbyFlow::fbs::SPHSystemData3 *GetSPHSystemData3(const void *buf) { return flatbuffers::GetRoot<CubbyFlow::fbs::SPHSystemData3>(buf); }

inline bool VerifySPHSystemData3Buffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<CubbyFlow::fbs::SPHSystemData3>(nullptr); }

inline void FinishSPHSystemData3Buffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<CubbyFlow::fbs::SPHSystemData3> root) { fbb.Finish(root); }

}  // namespace fbs
}  // namespace CubbyFlow

#endif  // FLATBUFFERS_GENERATED_SPHSYSTEMDATA3_CUBBYFLOW_FBS_H_
